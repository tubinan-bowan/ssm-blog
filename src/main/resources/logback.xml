<?xml version="1.0" encoding="UTF-8"?>
<!-- 表示启动配置文件扫描，每隔20秒扫描一次，就是说它会去检查你的配置文件在运行过程中配置 是否有变化 -->
<configuration debug="false" scan="true" scanPeriod="20 seconds">

    <!-- 节点<contextName>：用来设置上下文名称 -->
    <contextName>study-blog</contextName>
    <!-- 这里又定义一个变量 -->
    <property name="logDir" value="E:/log" ></property>
    <timestamp key="bySecond" datePattern="yyyyMMdd'T'HHmmss" />

    <!-- 是负责写日志的组件 输出到控制台 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <!-- <filter>是<appender>的一个子节点，表示在当前给到的日志级别下再进行一次过滤 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>info</level>
            <onMatch>NEUTRAL</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <!-- encoder表示对参数进行格式化 -->
        <encoder>
            <pattern>
                <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度 %msg：日志消息，%n是换行符-->
                <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger - %msg%n</pattern>
            </pattern>
        </encoder>
    </appender>

    <appender name="FILE" class="ch.qos.logback.core.FileAppender">
        <!-- <file>表示写入的文件名，可以使相对目录也可以是绝对目录，如果上级目录不存在 则自动创建 -->
        <file>${logDir}/log-${bySecond}.log</file>
        <append>true</append>
        <encoder>
            <pattern>
                %contextName %date %level [%thread] %logger{10}[%file:%line] %msg%n
            </pattern>
        </encoder>
    </appender>

    <!-- RollingFileAppender的作用是滚动记录文件，先将日志记录到指定文件，当符合某个条件时再将日志记录到其他文件 -->
    <appender name="ROL_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${logDir}/rolLog.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 按秒滚动纪录 -->
            <fileNamePattern>${logDir}/rolLog.%d{yyyy-MM-dd_HH-mmss}.log</fileNamePattern>
            <!-- 保留近30天滚动数据 -->
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>
        </encoder>
    </appender>

    <!-- 异步输出 -->
    <appender name ="ASYNC" class= "ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>256</queueSize>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref ="ROL_FILE"/>
    </appender>

    <!--
    用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>。
    <loger>仅有一个name属性，一个可选的level和一个可选的addtivity属性
    name:      用来指定受此logger约束的某一个包或者具体的某一个类。
    level:    用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，如果未设置此属性，那么当前logger将会继承上级的级别。
    additivity:             是否向上级loger传递打印信息。默认是true。
    <logger>可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个 logger
    -->
    <logger name="me.study.blog" level="info" additivity="false">
        <appender-ref ref="STDOUT"></appender-ref>
        <appender-ref ref="FILE" />
        <appender-ref ref="ROL_FILE" />
    </logger>

    <root level="info">
        <appender-ref ref="STDOUT" />
    </root>

</configuration>